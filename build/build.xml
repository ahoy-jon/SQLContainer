<?xml version="1.0" encoding="UTF-8"?>
<project name="Calendar" basedir="../" default="all">

    <!-- Main target that does all -->
    <target name="all" depends="compile, tests, manual, javadoc, package-jar, package-zip, demo.war"/>

    <!-- Non-project specific settings. -->
    <property file="build/build.properties" />
    <property name="configure.libs" value="" />
    <property name="module.junit.dir" value="${basedir}/build/result/unittests" />

    <!-- ================================================================== -->
    <!-- Initialization                                                     -->
    <!-- ================================================================== -->

    <!-- Clean old compilation results. -->
    <target name="clean-all">
        <delete dir="${result-path}" includes="**/*" followsymlinks="false" includeemptydirs="true" defaultexcludes="false" failonerror="false"/>
    </target>

    <!-- Checks that all the required libraries exist. -->
    <target name="check-libs">
        <available file="${gwt.lib.dir}/gwt-user.jar" property="gwt-user.present" />
        <available file="${gwt.lib.dir}/gwt-dev.jar" property="gwt-dev.present" />

        <fail message="${gwt.lib.dir}/gwt-user.jar missing" unless="gwt-user.present" />
        <fail message="${gwt.lib.dir}/gwt-dev.jar missing" unless="gwt-dev.present" />
    </target>

    <!-- Initialization -->
    <target name="init">
    	<!-- Might not exist -->
      	<echo>Using build property file: "${build.properties.file}"</echo>
        <property file="${build.properties.file}" />
    	<!-- If not already set by the build system -->
		<property name="version" value="${sqlcontainer.version}"/>
      	<echo>Add-on version: "${version}"</echo>
    	
    	<echo>Requirements for classpath:</echo>
        <echo> ${gwt.lib.dir}/gwt-user.jar</echo>
        <echo> ${gwt.lib.dir}/gwt-dev.jar</echo>

        <antcall target="check-libs"/>

        <path id="test.classpath">
            <fileset dir="build/lib">
                <include name="**/*.jar" />
            </fileset>
            
            <fileset dir="tests/lib">
                <include name="**/*.jar" />
            </fileset>

            <fileset dir="WebContent/WEB-INF/lib">
                <include name="**/*.jar" />
            </fileset>

            <fileset dir="build/lib">
                <include name="junit-4.5.jar" />
            </fileset>
        </path>

        <path id="compile.classpath">
            <fileset dir="build/lib">
                <include name="**/*.jar" />
            </fileset>
            
            <fileset dir="WebContent/WEB-INF/lib">
                <include name="**/*.jar" />
            </fileset>
        </path>
    </target>

    <!-- Fetch repository changes -->
    <target name="svn-update" unless="eclipse.running">
        <exec executable="svn">
            <arg line="update" />
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Compilation                                                        -->
    <!-- ================================================================== -->

    <!-- Compile server-side Java -->
    <target name="compile" depends="init" unless="run.no-compile">
        <property name="result.classes" value="${result-path}/war/WEB-INF/classes"/>

        <mkdir dir="${result.classes}"/>
        
         <!-- <javac destdir="${result.classes}" target="1.5" source="1.5"> --> 
         <javac destdir="${result.classes}" target="1.5" source="1.5" debug="true">
            <src path="src" />
            <include name="**/*.*" />

            <classpath refid="compile.classpath" />
            <classpath>
                <path path="src" />
                <path path="WebContent/WEB-INF/classes" />
                <path path="${gwt.lib.dir}/gwt-user.jar" />
                <path path="${gwt.lib.dir}/gwt-dev.jar" />
            </classpath>
        </javac>

    </target>
    
    <target name="compile-tests" depends="init, compile" unless="run.no-compile">
        <property name="result.test-classes" value="${result-path}/test/classes"/>

        <mkdir dir="${result.test-classes}"/>
        
         <javac destdir="${result.test-classes}" target="1.5" source="1.5"> 
         <!-- <javac destdir="${result.test-classes}" target="1.5" source="1.5" debug="true"> -->
            <src path="${test.src.base}" />
            <include name="**/*.*" />
            <classpath refid="test.classpath" />
            <classpath>
                <path path="${result.classes}" />
            </classpath>
        </javac>
    </target>

    <target name="compile-demo" depends="init, compile" unless="run.no-compile">
        <property name="result.demo-classes" value="${result-path}/demo/classes"/>

        <mkdir dir="${result.demo-classes}"/>
        
         <javac destdir="${result.demo-classes}" target="1.5" source="1.5"> 
         <!-- <javac destdir="${result.classes}" target="1.5" source="1.5" debug="true"> -->
            <src path="${demo.src.base}" />
            <include name="**/*.*" />

            <classpath refid="compile.classpath" />
            <classpath>
                <path path="${result.classes}" />
                <path path="src" />
                <path path="WebContent/WEB-INF/classes" />
                <path path="${gwt.lib.dir}/gwt-user.jar" />
                <path path="${gwt.lib.dir}/gwt-dev.jar" />
            </classpath>
        </javac>

    </target>


    <!-- Refresh the project in a locally running Eclipse. -->
    <target name="refresh-eclipse" if="eclipse.running">
        <echo>Refreshing project folder</echo>
        <eclipse.refreshLocal resource="SQLContainer" depth="infinite" />
    </target>

    <!-- ================================================================== -->
    <!-- Testing                                                            -->
    <!-- ================================================================== -->

    <!-- Server-side JUnit tests -->
    <target name="serverside-tests" depends="compile-tests">
        <echo>Running JUnit tests in ${test.src.base}/${test.src.dir}</echo>

        <echo>Test source base: ${test.src.base}</echo>
        <echo>Test source dir:  ${test.src.dir}</echo>

        <junit printsummary="yes" showoutput="true"> 
<!--            <formatter type="brief" usefile="false" />-->
            <classpath>
                <pathelement path="${result.test-classes}" />
                <pathelement path="${result.classes}" />
                <path refid="compile.classpath"/>
                <path refid="test.classpath"/>
            </classpath>
            <test fork="yes" name="com.vaadin.addon.sqlcontainer.AllTests" />
        </junit>
    </target>

    <target name="tests" depends="serverside-tests" unless="run.no-tests"/>

    <!-- ================================================================== -->
    <!-- Documentation                                                      -->
    <!-- ================================================================== -->
    
    <!-- Manual -->
    <target name="manual" unless="run.no-manual">
        <!-- Must delete the old version or conversion fails -->
        <delete file="${manual.pdf}"/>

        <!-- Start OpenOffice service -->
        <exec executable="python" searchpath="true" failonerror="true" >
            <arg value="build/odf-converter.py"/>
            <arg value="start"/>
        </exec>

        <echo>Converting the manual from ${manual.odt} to ${manual.pdf}...</echo>

        <!-- Convert the ODF text document to PDF -->
        <java jar="build/lib/jodconverter/jodconverter-cli-2.2.2.jar" fork="true">
            <arg value="${manual.odt}"/>
            <arg value="${manual.pdf}"/>
        </java>

        <!-- Stop OpenOffice service -->
        <exec executable="python" searchpath="true" failonerror="true" >
            <arg value="build/odf-converter.py"/>
            <arg value="stop"/>
        </exec>
    </target>
            
    <target name="javadoc" depends="init">
        <property name="javadoc.destdir" value="${result-path}/docs/api"/>
        
        <javadoc destdir="${javadoc.destdir}" author="true" version="true" use="true" windowtitle="${addon.name}" classpathref="compile.classpath">
            <packageset dir="src">
                <include name="com/vaadin/addon/**" />
            </packageset>
            <doctitle>${javadoc.doctitle}</doctitle>
            <!-- <header><![CDATA[<script type="text/javascript" src=".html-style/style.js"></script>]]></header> -->
            <bottom>${javadoc.bottom}</bottom>
            <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="build/javadoc/j2se-1.5.0" />
            <link offline="true" href="http://java.sun.com/j2ee/1.4/docs/api/" packagelistLoc="build/javadoc/j2ee-1.4" />
            <link offline="true" href="http://demo.vaadin.com/docs/api/" packagelistLoc="build/javadoc/vaadin" />
        </javadoc>
    </target>
    

    <!-- ================================================================== -->
    <!-- Packaging                                                          -->
    <!-- ================================================================== -->

    <!-- Create the JAR package. -->
    <target name="package-jar" depends="compile" unless="run.no-package-jar">
        <property name="jar.name" value="${addon.name}-${version}.jar"/>
        <property name="jar.path" value="${result-path}/${jar.name}"/>

        <jar jarfile="${jar.path}" compress="true">
            <manifest>
                <attribute name="Vaadin-Package-Version" value="1" />
<!--                <attribute name="Vaadin-Widgetsets" value="${addon.widgetset}" />-->
                <attribute name="Implementation-Title" value="${addon.title}" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Vendor" value="${addon.vendor}" />
            </manifest>
            
            <!-- The built server-side classes and the widget set class are here. -->
            <fileset dir="${result.classes}" />

            <!-- Especially all the widget set source files are required. -->
            <fileset dir="src" />
            
        </jar>
    </target>       

    <!-- Create the ZIP distribution package. -->
    <target name="package-zip" depends="package-jar, manual, javadoc" unless="run.no-package-zip">
        <property name="zip.name" value="${result-path}/${addon.name}-${version}.zip"/>
        <echo>Packaging Zip ${zip.name}</echo>

        <!-- Make the zip manifest -->
        <mkdir dir="${result-path}/META-INF"/>
        <echo file="${result-path}/META-INF/MANIFEST.MF">Vaadin-Addon: ${jar.name}
Vaadin-Package-Version: 1
Implementation-Title: ${addon.title}
Implementation-Version: ${version}
Implementation-Vendor: ${addon.vendor}
       </echo>         
                    
        <zip destfile="${zip.name}">
            <zipfileset dir="${result-path}" includes="META-INF/MANIFEST.MF" />         
            <zipfileset prefix="" file="${result-path}/${jar.name}" />              
            <zipfileset prefix="" file="doc/README.TXT" />
            <zipfileset prefix="doc" file="${manual.pdf}" />
            <zipfileset prefix="doc" file="${tutorial.pdf}" />
            <zipfileset prefix="doc/api" dir="${result-path}/docs/api" />
            <zipfileset prefix="doc" dir="doc">
                <patternset>
                    <include name="licensing.txt" />
                    <include name="license-asl-2.0.txt" />
                </patternset>
            </zipfileset>
        </zip>
    </target>

    <target name="demo.war" depends="javadoc, compile-demo,package-jar">
        <war destfile="${result-path}/${addon.name}.war" webxml="WebContent/WEB-INF/web.xml">
            <classes dir="${result.demo-classes}"/>
            <lib dir="WebContent/WEB-INF/lib" excludes="*src*" />
            <lib file="${jar.path}" />
            <fileset dir="WebContent">
                <patternset>
                    <include name="VAADIN/widgetsets/${addon.widgetset}/**/*" />
                    <include name="VAADIN/themes/**/*" />
                    <include name="*.html" />
                </patternset>
            </fileset>
            <fileset dir="${result-path}/docs/" includes="api/**/*" />
        </war>
    </target>
    
</project>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
